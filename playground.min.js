const compiler_explorer_host="https://godbolt.org",compiler_id="clang_trunk",lexy_id={id:"lexy",version:"trunk"};async function fetch_local_file(e){const t=await fetch(e);return t.ok?await t.text():""}function json_stringify(e){var t=JSON.stringify(e),t=t.replace(/[\u0080-\uFFFF]/g,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).substr(-4)});return t}export function list_of_productions(e){var t,n=[];const s=/(struct|class|using) ([a-zA-Z0-9_]+)/g;for(t=void 0;t=s.exec(e);)n.push(t[2]);return n}export async function preprocess_source(e,t,n){if(e=="playground"){const e=await fetch_local_file("/cpp/playground_headers.single.hpp"),s=`#define LEXY_PLAYGROUND_PRODUCTION ${n}`,o=await fetch_local_file("/cpp/playground_prefix.cpp"),i=await fetch_local_file("/cpp/playground_main.cpp");return e+`
`+s+`
`+o+`
`+t+`
`+i}const s=`#define LEXY_PLAYGROUND_PRODUCTION ${n}`,o=await fetch_local_file("/cpp/godbolt_prefix.cpp"),i=await fetch_local_file("/cpp/godbolt_main.cpp");return s+`
`+o+t+`
`+i}export async function compile_and_run(e,t,n){var a,r,c,s={};s.source=e,s.options={},s.options.userArguments="-fno-color-diagnostics -std=c++20",s.options.executeParameters={args:[n],stdin:t},s.options.compilerOptions={executorRequest:!0},s.options.filters={execute:!0},s.options.tools=[],s.options.libraries=[lexy_id],s.lang="c++";const l=new URL(`/api/compiler/${compiler_id}/compile`,compiler_explorer_host),i=await fetch(l,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:json_stringify(s)});if(!i.ok)return{success:!1,message:`Compiler Explorer error: ${i.status} - ${i.statusText}`};const o=await i.json();return o.didExecute?o.code==3?(a=o.stderr.map(e=>e.text).join(`
`),{success:!1,message:a}):(r=o.stdout.map(e=>e.text).join(`
`),c=o.stderr.map(e=>e.text).join(`
`),{success:!0,stdout:r,stderr:c,code:o.code}):(a=o.buildResult.stderr.map(e=>e.text).join(`
`),{success:!1,message:a})}function get_godbolt_clientstate(e,t){var s,n={};return n.id=1,n.language="c++",n.source=e,n.compilers=[],s={},s.id=compiler_id,s.libs=[lexy_id],s.options="-std=c++20",n.executors=[{compiler:s,stdin:t,stdinVisible:!0}],{sessions:[n]}}export async function get_godbolt_permalink(e,t){const s=get_godbolt_clientstate(e,t),o=new URL(`/api/shortener`,compiler_explorer_host),n=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:json_stringify(s)});return n.ok?(await n.json()).url:get_godbolt_url(e,t)}export function get_godbolt_url(e,t){const n=get_godbolt_clientstate(e,t),s=json_stringify(n),o=encodeURIComponent(btoa(s));return new URL(`/clientstate/${o}`,compiler_explorer_host)}export async function load_example(e){const t=/\/\/ INPUT:(.*)\n/,n=await fetch_local_file(e),s=n.replace(t,""),o=(t.exec(n)?.[1]??"").replaceAll(`\\n`,`
`);return{grammar:s.trim(),input:o,production:"production"}}export async function load_godbolt_url(e){const i=new URL(`/api/shortlinkinfo/${e}`,compiler_explorer_host),n=await fetch(i);if(!n.ok)return{grammar:"",input:"",production:""};const a=await n.json(),s=a.sessions[0],o=s.source,r=s.executors[0].stdin,c=/#define LEXY_PLAYGROUND_PRODUCTION ([a-zA-Z_0-9]+)/,l=c.exec(o)[1],d=/\/\/=== grammar ===\/\/([^]*)\/\/=== main function ===\/\//;let t=d.exec(o)[1];return t=t.trim(),{grammar:t,input:r,production:l}}